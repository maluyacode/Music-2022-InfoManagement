sessions
Session functions implement a concept you have already seen. That is the provision to users of a unique identifier, which can then be used from access to access to acquire information linked to that ID. The difference is that most of the work is already done for you. When a user accesses a session-enabled page, she will either be allocated a new identifier or reassociated with one that has already been established for her in a previous access. Any variables that have been associated with the session become available to your code



Starting a Session with session_start()
You need to explicitly start or resume a session unless you have changed your php.ini configuration file. By default, sessions do not start automatically. In php.ini, you will find a line containing the following:

session.auto_start = 0
By changing the value of session.auto_start to 1, you ensure that a session is initiated for every PHP document. If you don't change this setting, you need to call the session_start() function.

PHP uses files to store session data between requests so you should also check the session.save_path directive in your php.ini file. session.save_path defines the directory on your filesystem to which session files are saved. You should ensure that it exists and that your PHP process has permission to write to it:

session.save_path = "/tmp"


<?php
session_start();
 print "<p>Welcome, your session ID is ".session_id()."</p>\n\n";
?>

When this script is run for the first time from a browser, a session ID is generated by the session_start() function call.
If the page is later reloaded or revisited, the same session ID is allocated to the user. This presupposes, of course, that the user has cookies enabled on his browser. 
Because start_session() attempts to set a cookie when initiating a session for the first time, you need to call it before you output anything else to the browser. 
Notice that no expiry date is set in the cookie that PHP sets for the session. This means that the session remains current only as long as the browser is active. 
When the user restarts his browser, the cookie is not stored. You can change this behavior by altering the session.cookie_lifetime setting in your php.ini file.
 This defaults to 0, but you can set an expiry period in seconds. This causes an expiry date to be set for any session cookies 
sent to the browser.

Working with Session Variables
You can set any number of variables as elements of the superglobal $_SESSION array. After these are set, they are available to future requests in the session.

Registering Variables with a Session
<?php
session_start();
 $_SESSION['product1'] = "Sonic Screwdriver";
 $_SESSION['product2'] = "HAL 2000";
 print "The products have been registered";
 ?>
Accessing Session Variables
 <?php
  session_start();
  ?>
  <!DOCTYPE html PUBLIC
    "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html>
 <head>
  <title>Listing 20.3 Accessing Session Variables</title>
 </head>
 <body>
<div>
 <?php
 print "Your chosen products are:\n\n";
 ?>
 <ul>
 <li><?php print $_SESSION['product1'] ?></li>
 <li><?php print $_SESSION['product2'] ?></li>
 </ul>
 </div>
 </body>
 </html>
Registering an Array Variable with a Session
<?php
 session_start();

 if ( empty( $_SESSION['products'] ) ) {
   $_SESSION['products']=array();
 }

 if ( is_array( $_REQUEST['form_products'] ) ) {
   $_SESSION['products'] = array_unique(
     array_merge( $_SESSION['products'],
           $_REQUEST['form_products'] )
   );
 }
 ?>
 <!DOCTYPE html PUBLIC
   "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
 <head>
 <title>Listing 20.4 Registering an Array Element with a Session</title>
 </head>
 <body>
 <div>
 <h1>Product Choice Page</h1>
 <form action="<?php print $_SERVER['PHP_SELF']?>" method="post">
 <p>
: <select name="form_products[]" multiple="multiple" size="3">
 <option>Sonic Screwdriver</option>
 <option>Hal 2000</option>
 <option>Tardis</option>
 <option>ORAC</option>
 <option>Transporter bracelet</option>
 </select>
 </p>
 <p>
 <input type="submit" value="choose" />
 </p>
 </form>
 <a href="test.php">A content page</a>
 </div>
 </body>
 </html>
Accessing Session Variables
<?php
 session_start();
 ?>
 <!DOCTYPE html PUBLIC
:   "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html>
 <head>
 <title>Listing 20.5 Accessing Session Elements</title>
 </head>
 <body>
 <div>
 <h1>A Content Page</h1>
 <?php
 if ( is_array( $_SESSION['products'] ) ) {
   print "<b>Your cart:</b><ol>\n";
   foreach ( $_SESSION['products'] as $p ) {
     print "<li>$p</li>";
   }
   print "</ol>";
 }
 ?>
 <a href="session.php">Back to product choice page</a>
 </div>
 </body>
 </html>
Destroying Sessions and Unsetting Elements
You can use session_destroy() to end a session, erasing all session variables. session_destroy() requires no arguments. Destroying the session does not destroy the registered variable:

session_start();
$_SESSION['test'] = 5;
session_destroy();
print $_SESSION['test'];

To remove all $_SESSION elements, you should simply assign an empty array to the variable, like so:

session_start();
$_SESSION['test'] = 5;
session_destroy();
$_SESSION=array();
print $_SESSION['test'];

Passing Session IDs in the Query String
So far, you have relied on a cookie to save the session ID between script requests. On its own, this is not the most reliable way of saving state because you cannot be sure that the browser will accept cookies. You can build in a failsafe, however, by passing the session ID from script to script embedded in a query string. PHP makes a name/value pair available in a constant called SID if a cookie value for a session ID cannot be found. You can add this string to any HTML links in session-enabled pages:

<a href="anotherpage.html?<?php print SID; ?>">Another page</a>


 Encoding and Decoding Session Variables
You have already seen the way in which PHP encodes and saves (serializes) session variables when you peeked into a session file. You can, in fact, gain access to the encoded string at any time with session_encode(). This can be useful in debugging your session-enabled environments. You can use session_encode() to reveal the state of all session variables:

session_start();
print session_encode()."<br/>";

After having extracted an encoded string, you can decode it and resurrect its values using session_decode(). The following code fragment demonstrates this process:

session_start();
$_SESSION = array(); // there should now be no session variables
session_decode( "products|a:2:{i:0;s:8:\"Hal 2000\";i:1;s:6:\"Tardis\";}" );
foreach ( $_SESSION['products'] as $p ) {
  print "$p<br/>\n";
}

//INACTIVE SESSION
<?php

session_start();

// set timeout period in seconds
$inactive = 20;

// check to see if $_SESSION['timeout'] is set
if(isset($_SESSION['timeout']) ) {
$session_life = time() - $_SESSION['timeout'];
if($session_life > $inactive)
{ session_destroy(); 
header("Location: logout.php"); }
}
$_SESSION['timeout'] = time();
print "session start";
?>

//LOGOUT.PHP

<?

echo "you have been signed out"

?>